enum HomeStatus {
  FOR_SALE
  FOR_RENT
  SOLD
}

enum HomeType {
  HOUSES
  APARTMENT
  CONDOS
}

type House {
  id: ID!
  streetAddress: String
  city: String
  state: String
  zipCode: String
  lat: Float
  lng: Float
  price: Float
  dateSold: DateTime
  noOfBathrooms: Float
  noOfBedrooms: Int
  noOfParkingSpots: Int
  yearBuilt: String
  isOpenHouse: Boolean
  isPublished: Boolean
  homeStatus: HomeStatus
  homeType: HomeType
  lister: User!
  images: [Image]!
}

input imageInput {
  id: ID!
}

input newHouseInput {
  streetAddress: String!
  city: String!
  state: String!
  zipCode: String!
  lat: Float
  lng: Float
  price: Float
  livingArea: Float!
  noOfBathrooms: Float!
  noOfBedrooms: Int!
  noOfParkingSpots: Int!
  yearBuilt: String
  isOpenHouse: Boolean!
  homeStatus: HomeStatus
  homeType: HomeType!
  images: [imageInput]
}

input updateHouseInput {
  id: ID!
  price: Float
  dateSold: DateTime
  noOfBathrooms: Float
  noOfBedrooms: Int
  noOfParkingSpots: Int
  yearBuilt: String
  isOpenHouse: Boolean
  homeStatus: HomeStatus
  homeType: HomeType
  images: [ID]!
}

input addressInput {
  streetAddress: String!
  city: String
  state: String
  zipCode: String
}

type Address {
  formattedAddress: String
  lat: Float
  lng: Float
  streetAddress: String
  city: String
  state: String
  zipCode: String
  country: String
  house: House
}

extend type Query {
  house(id: ID!): House
  verifyAddress(input: addressInput!): Address!
}

extend type Mutation {
  publishHouse(id: ID!): House! @isAuthenticated
  unpublishHouse(id: ID!): House! @isAuthenticated
  addHouse(input: newHouseInput!): House! @isAuthenticated
  uploadHousePicture(file: Upload!): Image! @isAuthenticated
  updateHouse(input: updateHouseInput!): House! @isAuthenticated
}
